# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin sqlcustom [app_label]'
# into your database.
from __future__ import unicode_literals

from django.db import models


class Sms(models.Model):
    field_id = models.IntegerField(db_column='_id', blank=True, null=True)  # Field renamed because it started with '_'.
    date_created = models.DateField(blank=True, null=True)
    phone_number = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    message = models.CharField(max_length=50, blank=True, null=True)
    analysis = models.CharField(max_length=25, blank=True, null=True)
    resolution = models.CharField(max_length=25, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SMS'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey('AuthPermission')

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group_id', 'permission_id'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType')
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type_id', 'codename'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', blank=True, null=True)
    user = models.ForeignKey('PortalPortaluser')

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class DjangoSite(models.Model):
    domain = models.CharField(unique=True, max_length=100)
    name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'django_site'


class PortalBook(models.Model):
    title = models.CharField(unique=True, max_length=200)
    author = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'portal_book'


class PortalMessage(models.Model):
    header_id = models.IntegerField()
    is_from_sender = models.IntegerField()
    content = models.TextField()

    class Meta:
        managed = False
        db_table = 'portal_message'


class PortalMessageheader(models.Model):
    from_id = models.IntegerField()
    to_id = models.IntegerField()
    subject = models.CharField(max_length=127)
    time = models.DateTimeField()
    status = models.CharField(max_length=127)

    class Meta:
        managed = False
        db_table = 'portal_messageheader'


class PortalPortaluser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()
    address = models.CharField(max_length=255, blank=True, null=True)
    phone = models.CharField(max_length=255, blank=True, null=True)
    reason = models.CharField(max_length=255, blank=True, null=True)
    resettoken = models.CharField(db_column='resetToken', max_length=255, blank=True, null=True)  # Field name made lowercase.
    tokencreatedate = models.DateTimeField(db_column='tokenCreateDate', blank=True, null=True)  # Field name made lowercase.
    connections = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'portal_portaluser'


class PortalPortaluserGroups(models.Model):
    portaluser = models.ForeignKey(PortalPortaluser)
    group = models.ForeignKey(AuthGroup)

    class Meta:
        managed = False
        db_table = 'portal_portaluser_groups'
        unique_together = (('portaluser_id', 'group_id'),)


class PortalPortaluserUserPermissions(models.Model):
    portaluser = models.ForeignKey(PortalPortaluser)
    permission = models.ForeignKey(AuthPermission)

    class Meta:
        managed = False
        db_table = 'portal_portaluser_user_permissions'
        unique_together = (('portaluser_id', 'permission_id'),)


class PortalPortfolio(models.Model):
    created_date = models.DateTimeField()
    update_date = models.DateTimeField()
    name = models.TextField()
    description = models.TextField()
    risk = models.IntegerField()
    timeframe = models.TextField()
    control_market = models.CharField(max_length=1, blank=True, null=True)
    investment = models.FloatField()
    user = models.ForeignKey(PortalPortaluser)
    client_name = models.CharField(max_length=25, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'portal_portfolio'


class PortalSms(models.Model):
    date_created = models.DateTimeField()
    phone_number = models.CharField(max_length=255, blank=True, null=True)
    user_id = models.IntegerField()
    message = models.CharField(max_length=255)
    analysis = models.CharField(max_length=255)
    resolution = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'portal_sms'


class PortalStock(models.Model):
    created_date = models.DateTimeField()
    update_date = models.DateTimeField()
    ticker = models.TextField()
    show = models.ForeignKey(PortalPortfolio)
    buy_date = models.DateField(blank=True, null=True)
    current_price = models.DecimalField(max_digits=10, decimal_places=2)
    initial_price = models.DecimalField(max_digits=10, decimal_places=2)
    number_of_shares = models.IntegerField()
    sell_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'portal_stock'
